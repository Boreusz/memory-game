{"version":3,"sources":["InfoView.js","Card.js","GameView.js","HighscoresView.js","App.js","index.js"],"names":["InfoView","props","id","level","actualScore","bestScore","Card","className","clicked","status","onClick","e","handler","value","description","GameView","cards","ShuffleCards","array","i","length","j","Math","floor","random","handleClick","target","getAttribute","cardsToShuffle","index","cardsCopy","activeCards","cardCopy","parseInt","editCardStatusToTrue","setActiveCards","setActualScore","updateGame","addLastGame","resetGame","resetScore","resetLevel","setNextLevelCondition","slice","alert","score","NextLevelCondition","setLevel","amoutOfCards","usedCards","prepareLevel","useState","map","card","HighScoresView","data","game","App","allScores","setAllScores","setBestScore","HighscoresView","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.59b712a4.chunk.js","sourcesContent":["import React from 'react'\n\nconst InfoView = (props) => {\n    return(\n        <div id='info-bar'>\n        <h2>Level: {props.level}</h2>\n        <div id='scores'>\n           <h3>Score: {props.actualScore}</h3>\n           <h3>Best: {props.bestScore}</h3>\n        </div>\n      </div>\n    )\n}\n\nexport default InfoView","import React from 'react'\n\nconst Card  = (props) => {\n\n    return(\n        <div id={props.id} className='card' clicked={props.status} onClick={(e) => props.handler(e)}>\n            <span className='card-value'>{props.value}</span>\n            <span className='card-description'>{props.description}</span>\n        </div>\n    )\n}\nexport default Card","import React, { useState } from 'react'\nimport Card from \"./Card\";\n\nconst GameView = (props) => {\n    const cards = [['a', 'lorem Ipsom Dolor', 'false'], ['b', 'lorem Ipsom Dolor', 'false'],\n                    ['c', 'lorem Ipsom Dolor', 'false'], ['d', 'lorem Ipsom Dolor', 'false'],\n                    ['e', 'lorem Ipsom Dolor', 'false'], ['f', 'lorem Ipsom Dolor', 'false'],\n                    ['g', 'lorem Ipsom Dolor', 'false'], ['h', 'lorem Ipsom Dolor', 'false'],\n                    ['i', 'lorem Ipsom Dolor', 'false'], ['j', 'lorem Ipsom Dolor', 'false'],\n                    ['k', 'lorem Ipsom Dolor', 'false'], ['l', 'lorem Ipsom Dolor', 'false']]\n\n    const prepareLevel = (level) => {\n        let amoutOfCards = 2 + (2*level)\n        let usedCards = cards.slice(0,amoutOfCards)\n        setActiveCards(usedCards)\n        setNextLevelCondition(NextLevelCondition + amoutOfCards )\n    }\n    const ShuffleCards = (array) => {\n        for (let i = array.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]];\n        }\n        return array\n    }\n    const editCardStatusToTrue = (index) => {\n        let cardsCopy = [...activeCards];\n        let cardCopy = [...cardsCopy[parseInt(index)]]\n        cardCopy[2] = \"true\";\n        cardsCopy[parseInt(index)] = cardCopy;\n        return cardsCopy\n    }\n    const handleClick = (e) => {\n        if(e.target.getAttribute('clicked') === 'false'){\n            let cardsToShuffle = editCardStatusToTrue(e.target.id)\n            setActiveCards(ShuffleCards(cardsToShuffle));\n            props.setActualScore()\n            updateGame()\n        }else{\n            props.addLastGame()\n            resetGame()\n        }\n    }\n    const resetGame = () => {\n        props.resetScore()\n        props.resetLevel()\n        setNextLevelCondition(4)\n        setActiveCards(ShuffleCards(cards).slice(0,4))\n        alert('GAME OVER');\n    }\n    const updateGame = () => {\n        if((props.score+1) === NextLevelCondition && props.level <= 5){\n            props.setLevel()\n            prepareLevel(props.level+1)\n        }else if ((props.score+1) === activeCards.length && props.level === 5){\n            alert(\"YOU WON\")\n        }\n    }\n    const [ activeCards, setActiveCards] = useState(ShuffleCards(cards).slice(0,4))\n    const [NextLevelCondition, setNextLevelCondition] = useState(4)\n    return(\n        <div id='game-board'>\n            {activeCards.map((card,index) => <Card key={`c${index}`} id={index} value={card[0]} description={card[1]} status={card[2]} handler={handleClick}/>)}\n        </div>\n    )\n}\nexport default GameView","import React from 'react'\n\nconst HighScoresView = (props) =>{\n    return(\n        <div id='game-history'>\n            <h2>History of Games:</h2>\n            <ol>\n                {props.data.map((game) => <li>Level: {game.level} - <span className={props.bestScore === game.score ? 'best-score': null }>Score: {game.score}</span></li>)}\n            </ol>\n        </div>\n    )\n}\nexport default HighScoresView","import React, { useState } from 'react';\nimport InfoView from './InfoView';\nimport GameView from './GameView';\nimport HighscoresView from './HighscoresView'\nimport './App.css';\nimport './gameboard.css';\n\nconst App = () => {\n  const [allScores, setAllScores] = useState([]);\n  const [level, setLevel] = useState(1);\n  const [actualScore, setActualScore] = useState(0);\n  const [bestScore, setBestScore] = useState(0)\n  const scoreUpdate = () => {\n    setActualScore(actualScore + 1)\n    if((actualScore +1) >= bestScore){\n      setBestScore(actualScore +1)\n    }\n  }\n  const levelUpdate = () => {\n    setLevel(level + 1)\n  }\n  const resetScore = () => {\n    setActualScore(0)\n  }\n  const resetLevel = () => {\n    setLevel(1)\n  }\n  const addLastGame = () => {\n    setAllScores(allScores => [...allScores, {level: level, score: actualScore}])\n  }\n  return (\n    <>\n      <div className=\"App\">\n        <header>\n          <h1>Memory</h1>\n          <InfoView level={ level } actualScore={ actualScore } bestScore={ bestScore }/>\n        </header>\n        <GameView score={ actualScore } level={ level } setLevel={ levelUpdate } setActualScore= { scoreUpdate } setBestScore={ setBestScore }\n                  setAllScores = { setAllScores } resetScore = { resetScore } resetLevel={ resetLevel } addLastGame={addLastGame}/>\n        { allScores.length > 0 ? <HighscoresView data={allScores} bestScore={ bestScore }/> : null }\n      </div>\n      <footer>\n        <span>Done by <a href='https://github.com/Boreusz'>Broreusz</a></span>\n      </footer>\n  </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}